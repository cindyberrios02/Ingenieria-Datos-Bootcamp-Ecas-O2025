import math


def area_circulo(radio):
    """
    Calcula el √°rea de un c√≠rculo dado su radio.
    
    F√≥rmula: œÄ * r¬≤
    
    Args:
        radio (float): Radio del c√≠rculo (debe ser positivo)
        
    Returns:
        float: √Årea del c√≠rculo
        
    Raises:
        ValueError: Si el radio es negativo
        TypeError: Si el radio no es un n√∫mero
        
    Example:
        >>> area_circulo(5)
        78.53981633974483
    """
    try:
        radio = float(radio)
        if radio < 0:
            raise ValueError("El radio no puede ser negativo")
        return math.pi * radio ** 2
    except (ValueError, TypeError) as e:
        if "could not convert" in str(e):
            raise TypeError("El radio debe ser un n√∫mero")
        raise


def area_rectangulo(ancho, alto):
    """
    Calcula el √°rea de un rect√°ngulo dado su ancho y alto.
    
    F√≥rmula: ancho * alto
    
    Args:
        ancho (float): Ancho del rect√°ngulo (debe ser positivo)
        alto (float): Alto del rect√°ngulo (debe ser positivo)
        
    Returns:
        float: √Årea del rect√°ngulo
        
    Raises:
        ValueError: Si el ancho o alto son negativos
        TypeError: Si el ancho o alto no son n√∫meros
        
    Example:
        >>> area_rectangulo(4, 6)
        24
    """
    try:
        ancho = float(ancho)
        alto = float(alto)
        
        if ancho < 0 or alto < 0:
            raise ValueError("El ancho y alto deben ser positivos")
            
        return ancho * alto
        
    except (ValueError, TypeError) as e:
        if "could not convert" in str(e):
            raise TypeError("El ancho y alto deben ser n√∫meros")
        raise


def area_triangulo(base, altura):
    """
    Calcula el √°rea de un tri√°ngulo dado su base y altura.
    
    F√≥rmula: (base * altura) / 2
    
    Args:
        base (float): Base del tri√°ngulo (debe ser positiva)
        altura (float): Altura del tri√°ngulo (debe ser positiva)
        
    Returns:
        float: √Årea del tri√°ngulo
        
    Raises:
        ValueError: Si la base o altura son negativos
        TypeError: Si la base o altura no son n√∫meros
        
    Example:
        >>> area_triangulo(10, 8)
        40.0
    """
    try:
        base = float(base)
        altura = float(altura)
        
        if base < 0 or altura < 0:
            raise ValueError("La base y altura deben ser positivos")
            
        return (base * altura) / 2
        
    except (ValueError, TypeError) as e:
        if "could not convert" in str(e):
            raise TypeError("La base y altura deben ser n√∫meros")
        raise


def factorial(numero):
    """
    Calcula el factorial de un n√∫mero entero no negativo.
    
    F√≥rmula: n! = n * (n-1) * (n-2) * ... * 1
    
    Args:
        numero (int): N√∫mero entero no negativo
        
    Returns:
        int: Factorial del n√∫mero
        
    Raises:
        ValueError: Si el n√∫mero es negativo
        TypeError: Si el n√∫mero no es entero
        
    Example:
        >>> factorial(5)
        120
        >>> factorial(0)
        1
    """
    try:
        numero = int(numero)
        if numero < 0:
            raise ValueError("El factorial no est√° definido para n√∫meros negativos")
            
        if numero == 0 or numero == 1:
            return 1
        
        resultado = 1
        for i in range(2, numero + 1):
            resultado *= i
            
        return resultado
        
    except (ValueError, TypeError) as e:
        if "invalid literal" in str(e):
            raise TypeError("El n√∫mero debe ser un entero")
        raise


def es_primo(numero):
    """
    Determina si un n√∫mero es primo.
    
    Un n√∫mero primo es un entero mayor que 1 que no tiene divisores
    positivos distintos a 1 y √©l mismo.
    
    Args:
        numero (int): N√∫mero entero a verificar
        
    Returns:
        bool: True si el n√∫mero es primo, False en caso contrario
        
    Raises:
        TypeError: Si el n√∫mero no es entero
        
    Example:
        >>> es_primo(17)
        True
        >>> es_primo(15)
        False
    """
    try:
        numero = int(numero)
        
        # Los n√∫meros menores a 2 no son primos
        if numero < 2:
            return False
            
        # 2 es primo
        if numero == 2:
            return True
            
        # Los n√∫meros pares mayores a 2 no son primos
        if numero % 2 == 0:
            return False
            
        # Verificar divisibilidad desde 3 hasta la ra√≠z cuadrada del n√∫mero
        # Solo verificamos n√∫meros impares
        for i in range(3, int(math.sqrt(numero)) + 1, 2):
            if numero % i == 0:
                return False
                
        return True
        
    except (ValueError, TypeError):
        raise TypeError("El n√∫mero debe ser un entero")


def area_poligono_regular(num_lados, longitud_lado):
    """
    Calcula el √°rea de un pol√≠gono regular dado su n√∫mero de lados y longitud de cada lado.
    
    F√≥rmula: (n * s¬≤) / (4 * tan(œÄ/n))
    donde n = n√∫mero de lados, s = longitud del lado
    
    Args:
        num_lados (int): N√∫mero de lados del pol√≠gono (debe ser >= 3)
        longitud_lado (float): Longitud de cada lado (debe ser positiva)
        
    Returns:
        float: √Årea del pol√≠gono regular
        
    Raises:
        ValueError: Si el n√∫mero de lados es menor a 3 o la longitud es negativa
        TypeError: Si los par√°metros no son n√∫meros
        
    Example:
        >>> area_poligono_regular(6, 5)  # Hex√°gono regular
        64.95190528383289
    """
    try:
        num_lados = int(num_lados)
        longitud_lado = float(longitud_lado)
        
        if num_lados < 3:
            raise ValueError("Un pol√≠gono debe tener al menos 3 lados")
            
        if longitud_lado < 0:
            raise ValueError("La longitud del lado debe ser positiva")
            
        # F√≥rmula para el √°rea de un pol√≠gono regular
        area = (num_lados * longitud_lado ** 2) / (4 * math.tan(math.pi / num_lados))
        
        return area
        
    except (ValueError, TypeError) as e:
        if "invalid literal" in str(e) or "could not convert" in str(e):
            raise TypeError("Los par√°metros deben ser n√∫meros v√°lidos")
        raise


def obtener_info_circulo(radio):
    """
    Funci√≥n adicional: Obtiene informaci√≥n completa de un c√≠rculo.
    
    Args:
        radio (float): Radio del c√≠rculo
        
    Returns:
        dict: Diccionario con √°rea, per√≠metro y di√°metro
    """
    try:
        radio = float(radio)
        if radio < 0:
            raise ValueError("El radio no puede ser negativo")
            
        return {
            'radio': radio,
            'area': area_circulo(radio),
            'perimetro': 2 * math.pi * radio,
            'diametro': 2 * radio
        }
    except (ValueError, TypeError) as e:
        if "could not convert" in str(e):
            raise TypeError("El radio debe ser un n√∫mero")
        raise


def lista_primos(limite):
    """
    Funci√≥n adicional: Genera una lista de n√∫meros primos hasta un l√≠mite.
    
    Args:
        limite (int): L√≠mite superior para buscar primos
        
    Returns:
        list: Lista de n√∫meros primos hasta el l√≠mite
    """
    try:
        limite = int(limite)
        if limite < 2:
            return []
            
        primos = []
        for num in range(2, limite + 1):
            if es_primo(num):
                primos.append(num)
                
        return primos
        
    except (ValueError, TypeError):
        raise TypeError("El l√≠mite debe ser un entero")


def calcular_hipotenusa(cateto1, cateto2):
    """
    Funci√≥n adicional: Calcula la hipotenusa de un tri√°ngulo rect√°ngulo.
    
    F√≥rmula: ‚àö(cateto1¬≤ + cateto2¬≤)
    
    Args:
        cateto1 (float): Primer cateto
        cateto2 (float): Segundo cateto
        
    Returns:
        float: Longitud de la hipotenusa
    """
    try:
        cateto1 = float(cateto1)
        cateto2 = float(cateto2)
        
        if cateto1 < 0 or cateto2 < 0:
            raise ValueError("Los catetos deben ser positivos")
            
        return math.sqrt(cateto1**2 + cateto2**2)
        
    except (ValueError, TypeError) as e:
        if "could not convert" in str(e):
            raise TypeError("Los catetos deben ser n√∫meros")
        raise


# Constantes matem√°ticas √∫tiles
PI = math.pi
E = math.e
PHI = (1 + math.sqrt(5)) / 2  # Proporci√≥n √°urea


def mostrar_constantes():
    """
    Muestra las constantes matem√°ticas disponibles en el m√≥dulo.
    """
    print("üî¢ CONSTANTES MATEM√ÅTICAS DISPONIBLES:")
    print(f"  œÄ (PI): {PI:.10f}")
    print(f"  e (E): {E:.10f}")
    print(f"  œÜ (PHI - Proporci√≥n √°urea): {PHI:.10f}")


if __name__ == "__main__":
    # Pruebas del m√≥dulo cuando se ejecuta directamente
    print("üßÆ M√ìDULO DE UTILIDADES MATEM√ÅTICAS")
    print("=" * 40)
    print("Ejecutando pruebas del m√≥dulo...\n")
    
    try:
        # Pruebas de √°reas
        print("üìê PRUEBAS DE √ÅREAS:")
        print(f"√Årea c√≠rculo (r=5): {area_circulo(5):.2f}")
        print(f"√Årea rect√°ngulo (4x6): {area_rectangulo(4, 6)}")
        print(f"√Årea tri√°ngulo (b=10, h=8): {area_triangulo(10, 8)}")
        print(f"√Årea hex√°gono regular (l=5): {area_poligono_regular(6, 5):.2f}")
        
        # Pruebas de n√∫meros
        print(f"\nüî¢ PRUEBAS NUM√âRICAS:")
        print(f"Factorial de 5: {factorial(5)}")
        print(f"¬øEs 17 primo?: {es_primo(17)}")
        print(f"¬øEs 15 primo?: {es_primo(15)}")
        
        # Pruebas adicionales
        print(f"\n‚ûï FUNCIONES ADICIONALES:")
        print(f"Hipotenusa (3,4): {calcular_hipotenusa(3, 4):.2f}")
        print(f"Primos hasta 20: {lista_primos(20)}")
        
        mostrar_constantes()
        
        print(f"\n‚úÖ ¬°Todas las pruebas completadas exitosamente!")
        
    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")