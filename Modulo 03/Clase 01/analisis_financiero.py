"""
AN√ÅLISIS DE CASO: Aplicaci√≥n de NumPy en el An√°lisis de Datos Financieros
M√≥dulo 3 - Obtenci√≥n y Preparaci√≥n de Datos
Bootcamp de Ingenier√≠a de Datos
Fecha: Junio 2025
"""

import numpy as np
import time
import pandas as pd
from typing import Tuple, List

# Configuraci√≥n para reproducibilidad
np.random.seed(42)

print("="*80)
print("AN√ÅLISIS FINANCIERO CON NUMPY")
print("Optimizaci√≥n de Datos para Empresa de An√°lisis Financiero")
print("="*80)

# ============================================================================
# 1. CARGA Y ESTRUCTURACI√ìN DE DATOS
# ============================================================================

def crear_datos_financieros() -> Tuple[np.ndarray, List[str], List[str]]:
    """
    Crea datos financieros simulados para 5 acciones durante 5 d√≠as.
    
    Returns:
        Tuple con matriz de precios, nombres de acciones y fechas
    """
    print("\n1. CARGA Y ESTRUCTURACI√ìN DE DATOS")
    print("-" * 50)
    
    # Nombres de las acciones
    acciones = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA']
    fechas = ['2025-06-13', '2025-06-14', '2025-06-16', '2025-06-17', '2025-06-18']
    
    # Precios base simulados (valores realistas)
    precios_base = np.array([150.0, 2800.0, 350.0, 3200.0, 800.0])
    
    # Crear matriz 5x5 con variaciones diarias realistas
    # Cada fila = acci√≥n, cada columna = d√≠a
    variaciones = np.random.normal(0, 0.02, (5, 5))  # Variaciones de ¬±2% promedio
    precios_matriz = precios_base.reshape(-1, 1) * (1 + variaciones)
    
    print(f"‚úì Datos creados: Matriz {precios_matriz.shape}")
    print(f"‚úì Acciones: {acciones}")
    print(f"‚úì Per√≠odo: {fechas[0]} a {fechas[-1]}")
    
    # Mostrar la matriz de precios
    print(f"\nüìä Matriz de Precios (Acciones x D√≠as):")
    print("Acciones\\D√≠as", end="")
    for i, fecha in enumerate(fechas):
        print(f"{fecha:>12}", end="")
    print()
    
    for i, accion in enumerate(acciones):
        print(f"{accion:>12}", end="")
        for j in range(5):
            print(f"{precios_matriz[i, j]:>12.2f}", end="")
        print()
    
    return precios_matriz, acciones, fechas

# ============================================================================
# 2. AN√ÅLISIS Y TRANSFORMACI√ìN DE DATOS
# ============================================================================

def analisis_estadistico(precios: np.ndarray, acciones: List[str]) -> dict:
    """
    Realiza an√°lisis estad√≠stico b√°sico de los datos.
    
    Args:
        precios: Matriz de precios (acciones x d√≠as)
        acciones: Lista de nombres de acciones
        
    Returns:
        Diccionario con estad√≠sticas calculadas
    """
    print("\n2. AN√ÅLISIS Y TRANSFORMACI√ìN DE DATOS")
    print("-" * 50)
    
    # Estad√≠sticas b√°sicas por acci√≥n (a lo largo del tiempo)
    promedios = np.mean(precios, axis=1)
    maximos = np.max(precios, axis=1)
    minimos = np.min(precios, axis=1)
    desviaciones = np.std(precios, axis=1)
    
    print("üìà ESTAD√çSTICAS POR ACCI√ìN:")
    print(f"{'Acci√≥n':<8} {'Promedio':<12} {'M√°ximo':<12} {'M√≠nimo':<12} {'Desv.Est':<12}")
    print("-" * 60)
    
    for i, accion in enumerate(acciones):
        print(f"{accion:<8} {promedios[i]:<12.2f} {maximos[i]:<12.2f} "
              f"{minimos[i]:<12.2f} {desviaciones[i]:<12.2f}")
    
    return {
        'promedios': promedios,
        'maximos': maximos,
        'minimos': minimos,
        'desviaciones': desviaciones
    }

def calcular_variaciones_porcentuales(precios: np.ndarray, acciones: List[str]) -> np.ndarray:
    """
    Calcula la variaci√≥n porcentual diaria de cada acci√≥n.
    
    Args:
        precios: Matriz de precios
        acciones: Lista de nombres de acciones
        
    Returns:
        Matriz de variaciones porcentuales
    """
    print("\nüíπ VARIACIONES PORCENTUALES DIARIAS:")
    
    # Calcular variaciones usando operaciones vectorizadas
    # Variaci√≥n = (precio_actual - precio_anterior) / precio_anterior * 100
    variaciones = np.zeros((precios.shape[0], precios.shape[1] - 1))
    
    for i in range(1, precios.shape[1]):
        variaciones[:, i-1] = ((precios[:, i] - precios[:, i-1]) / precios[:, i-1]) * 100
    
    print(f"{'Acci√≥n':<8} {'D√≠a 1‚Üí2':<10} {'D√≠a 2‚Üí3':<10} {'D√≠a 3‚Üí4':<10} {'D√≠a 4‚Üí5':<10}")
    print("-" * 50)
    
    for i, accion in enumerate(acciones):
        print(f"{accion:<8}", end="")
        for j in range(4):
            print(f"{variaciones[i, j]:>9.2f}%", end=" ")
        print()
    
    return variaciones

def aplicar_transformaciones_matematicas(precios: np.ndarray) -> dict:
    """
    Aplica transformaciones matem√°ticas a los datos.
    
    Args:
        precios: Matriz de precios
        
    Returns:
        Diccionario con transformaciones aplicadas
    """
    print("\nüî¢ TRANSFORMACIONES MATEM√ÅTICAS:")
    
    # Aplicar logaritmo natural (√∫til para rendimientos)
    log_precios = np.log(precios)
    
    # Aplicar normalizaci√≥n Z-score por acci√≥n
    precios_normalizados = (precios - np.mean(precios, axis=1, keepdims=True)) / \
                          np.std(precios, axis=1, keepdims=True)
    
    # Aplicar exponencial (para simulaci√≥n de crecimiento)
    exp_factor = np.exp(precios / 1000)  # Dividir por 1000 para evitar overflow
    
    print(f"‚úì Logaritmo natural aplicado - Rango: [{np.min(log_precios):.2f}, {np.max(log_precios):.2f}]")
    print(f"‚úì Normalizaci√≥n Z-score aplicada - Media: {np.mean(precios_normalizados):.2f}")
    print(f"‚úì Factor exponencial calculado - Rango: [{np.min(exp_factor):.2f}, {np.max(exp_factor):.2f}]")
    
    return {
        'log_precios': log_precios,
        'precios_normalizados': precios_normalizados,
        'exp_factor': exp_factor
    }

# ============================================================================
# 3. OPTIMIZACI√ìN Y SELECCI√ìN DE DATOS
# ============================================================================

def indexacion_avanzada(precios: np.ndarray, acciones: List[str], fechas: List[str]):
    """
    Demuestra t√©cnicas de indexaci√≥n avanzada.
    
    Args:
        precios: Matriz de precios
        acciones: Lista de nombres de acciones
        fechas: Lista de fechas
    """
    print("\n3. OPTIMIZACI√ìN Y SELECCI√ìN DE DATOS")
    print("-" * 50)
    
    print("üéØ INDEXACI√ìN AVANZADA:")
    
    # Selecci√≥n espec√≠fica: AAPL en el d√≠a 3
    precio_especifico = precios[0, 2]  # AAPL (√≠ndice 0), d√≠a 3 (√≠ndice 2)
    print(f"‚úì Precio de {acciones[0]} el {fechas[2]}: ${precio_especifico:.2f}")
    
    # Selecci√≥n de m√∫ltiples acciones en un d√≠a espec√≠fico
    precios_dia_1 = precios[:, 0]
    print(f"‚úì Precios del primer d√≠a ({fechas[0]}):")
    for i, accion in enumerate(acciones):
        print(f"  {accion}: ${precios_dia_1[i]:.2f}")
    
    # Selecci√≥n usando m√°scaras booleanas
    # Encontrar acciones con precio > 1000
    mask_alto_precio = precios[:, 0] > 1000
    acciones_alto_precio = np.array(acciones)[mask_alto_precio]
    print(f"‚úì Acciones con precio inicial > $1000: {list(acciones_alto_precio)}")
    
    # Indexaci√≥n fancy: seleccionar acciones espec√≠ficas en d√≠as espec√≠ficos
    indices_acciones = [0, 2, 4]  # AAPL, MSFT, TSLA
    indices_dias = [0, 2, 4]      # D√≠as 1, 3, 5
    seleccion_fancy = precios[np.ix_(indices_acciones, indices_dias)]
    print(f"‚úì Selecci√≥n fancy (3x3): Forma {seleccion_fancy.shape}")

def demostracion_broadcasting(precios: np.ndarray):
    """
    Demuestra el uso de broadcasting para operaciones eficientes.
    
    Args:
        precios: Matriz de precios
    """
    print("\n‚ö° BROADCASTING Y OPERACIONES VECTORIZADAS:")
    
    # Calcular porcentaje de cambio respecto al primer d√≠a usando broadcasting
    inicio = time.time()
    
    # M√©todo con broadcasting (eficiente)
    primer_dia = precios[:, 0:1]  # Mantener dimensi√≥n para broadcasting
    cambio_porcentual = ((precios - primer_dia) / primer_dia) * 100
    
    tiempo_numpy = time.time() - inicio
    
    print(f"‚úì Broadcasting completado en {tiempo_numpy:.6f} segundos")
    print(f"‚úì Cambio porcentual respecto al primer d√≠a:")
    print(f"  Forma de la matriz resultado: {cambio_porcentual.shape}")
    print(f"  Rango de cambios: [{np.min(cambio_porcentual):.2f}%, {np.max(cambio_porcentual):.2f}%]")
    
    # Aplicar operaci√≥n matem√°tica a toda la matriz usando broadcasting
    factor_ajuste = np.array([1.02, 1.01, 1.03, 1.015, 1.025]).reshape(-1, 1)
    precios_ajustados = precios * factor_ajuste
    
    print(f"‚úì Precios ajustados con factores espec√≠ficos por acci√≥n aplicados")
    print(f"  Diferencia promedio: ${np.mean(precios_ajustados - precios):.2f}")

# ============================================================================
# 4. COMPARACI√ìN CON OTROS M√âTODOS
# ============================================================================

def comparacion_metodos(precios: np.ndarray):
    """
    Compara la eficiencia de NumPy vs m√©todos tradicionales.
    
    Args:
        precios: Matriz de precios
    """
    print("\n4. COMPARACI√ìN CON OTROS M√âTODOS")
    print("-" * 50)
    
    print("‚è±Ô∏è COMPARACI√ìN DE RENDIMIENTO:")
    
    # Crear datos m√°s grandes para la comparaci√≥n
    datos_grandes = np.random.rand(1000, 1000) * 100 + 50
    
    # M√©todo con NumPy (vectorizado)
    inicio = time.time()
    promedio_numpy = np.mean(datos_grandes, axis=1)
    tiempo_numpy = time.time() - inicio
    
    # M√©todo tradicional con bucles (simulado)
    inicio = time.time()
    promedio_bucles = []
    for fila in datos_grandes:
        suma = 0
        for valor in fila:
            suma += valor
        promedio_bucles.append(suma / len(fila))
    tiempo_bucles = time.time() - inicio
    
    print(f"‚úì NumPy (vectorizado): {tiempo_numpy:.6f} segundos")
    print(f"‚úì Bucles tradicionales: {tiempo_bucles:.6f} segundos")
    print(f"‚úì NumPy es {tiempo_bucles/tiempo_numpy:.1f}x m√°s r√°pido")
    
    # Comparaci√≥n de uso de memoria
    print(f"\nüíæ USO DE MEMORIA:")
    print(f"‚úì NumPy array: {datos_grandes.nbytes / 1024:.1f} KB")
    print(f"‚úì Lista Python equivalente: ~{datos_grandes.size * 28 / 1024:.1f} KB")
    print(f"‚úì NumPy usa ~{28 / 8:.1f}x menos memoria")

def analisis_codigo_legibilidad():
    """
    Analiza la legibilidad y mantenibilidad del c√≥digo.
    """
    print(f"\nüìù AN√ÅLISIS DE LEGIBILIDAD DEL C√ìDIGO:")
    
    print("‚úì SIN NUMPY (m√©todo tradicional):")
    print("""
    # Calcular promedio de cada fila
    promedios = []
    for i in range(len(datos)):
        suma = 0
        for j in range(len(datos[i])):
            suma += datos[i][j]
        promedios.append(suma / len(datos[i]))
    """)
    
    print("‚úì CON NUMPY (m√©todo optimizado):")
    print("""
    # Calcular promedio de cada fila
    promedios = np.mean(datos, axis=1)
    """)
    
    print("üëç VENTAJAS DE NUMPY:")
    print("  ‚Ä¢ C√≥digo m√°s conciso y legible")
    print("  ‚Ä¢ Menor posibilidad de errores")
    print("  ‚Ä¢ Mejor rendimiento computacional")
    print("  ‚Ä¢ Operaciones vectorizadas autom√°ticas")

# ============================================================================
# 5. FUNCI√ìN PRINCIPAL Y AN√ÅLISIS COMPLETO
# ============================================================================

def main():
    """
    Funci√≥n principal que ejecuta todo el an√°lisis.
    """
    print("üöÄ Iniciando an√°lisis financiero con NumPy...")
    
    # 1. Crear y cargar datos
    precios_matriz, acciones, fechas = crear_datos_financieros()
    
    # 2. An√°lisis estad√≠stico
    estadisticas = analisis_estadistico(precios_matriz, acciones)
    variaciones = calcular_variaciones_porcentuales(precios_matriz, acciones)
    transformaciones = aplicar_transformaciones_matematicas(precios_matriz)
    
    # 3. Optimizaci√≥n y selecci√≥n
    indexacion_avanzada(precios_matriz, acciones, fechas)
    demostracion_broadcasting(precios_matriz)
    
    # 4. Comparaci√≥n de m√©todos
    comparacion_metodos(precios_matriz)
    analisis_codigo_legibilidad()
    
    # 5. Conclusiones
    print("\n" + "="*80)
    print("CONCLUSIONES DEL AN√ÅLISIS")
    print("="*80)
    
    print("\nüéØ RESULTADOS CLAVE:")
    print(f"‚úì Procesamiento de {precios_matriz.size} puntos de datos")
    print(f"‚úì {len(acciones)} acciones analizadas durante {len(fechas)} d√≠as")
    print(f"‚úì Variaci√≥n promedio del mercado: {np.mean(np.abs(variaciones)):.2f}%")
    print(f"‚úì Acci√≥n m√°s vol√°til: {acciones[np.argmax(estadisticas['desviaciones'])]}")
    print(f"‚úì Acci√≥n m√°s estable: {acciones[np.argmin(estadisticas['desviaciones'])]}")
    
    print("\nüèÜ VENTAJAS DE NUMPY DEMOSTRADAS:")
    print("‚úì Rendimiento: Hasta 10-100x m√°s r√°pido que bucles tradicionales")
    print("‚úì Memoria: Uso eficiente de memoria (3-4x menos que listas)")
    print("‚úì C√≥digo: M√°s conciso y menos propenso a errores")
    print("‚úì Funcionalidad: Operaciones matem√°ticas avanzadas integradas")
    print("‚úì Broadcasting: Operaciones autom√°ticas sin bucles expl√≠citos")
    
    print("\nüìã RECOMENDACIONES PARA LA EMPRESA:")
    print("1. Migrar todos los c√°lculos financieros a NumPy")
    print("2. Usar broadcasting para operaciones en lote")
    print("3. Implementar indexaci√≥n avanzada para consultas espec√≠ficas")
    print("4. Aprovechar funciones vectorizadas para an√°lisis en tiempo real")
    print("5. Considerar integraci√≥n con pandas para manejo de datos tabulares")
    
    print(f"\n‚úÖ An√°lisis completado exitosamente!")
    print("="*80)

# ============================================================================
# EJECUCI√ìN DEL PROGRAMA
# ============================================================================

if __name__ == "__main__":
    main()

# ============================================================================
# C√ìDIGO ADICIONAL PARA EXPERIMENTACI√ìN
# ============================================================================

def ejemplo_uso_avanzado():
    """
    Ejemplos adicionales de uso avanzado de NumPy para an√°lisis financiero.
    """
    print("\nüî¨ EJEMPLOS DE USO AVANZADO:")
    
    # Simulaci√≥n Monte Carlo simple
    np.random.seed(123)
    n_simulaciones = 1000
    rendimientos_diarios = np.random.normal(0.001, 0.02, n_simulaciones)  # 0.1% promedio, 2% volatilidad
    precios_simulados = 100 * np.cumprod(1 + rendimientos_diarios)
    
    print(f"‚úì Simulaci√≥n Monte Carlo de {n_simulaciones} d√≠as")
    print(f"  Precio final promedio: ${np.mean(precios_simulados[-100:]):.2f}")
    print(f"  Volatilidad simulada: {np.std(rendimientos_diarios)*100:.2f}%")
    
    # Correlaci√≥n entre acciones (matriz de correlaci√≥n)
    datos_correlacion = np.random.multivariate_normal([0, 0, 0], [[1, 0.5, 0.3], [0.5, 1, 0.7], [0.3, 0.7, 1]], 100)
    matriz_correlacion = np.corrcoef(datos_correlacion.T)
    print(f"‚úì Matriz de correlaci√≥n calculada: {matriz_correlacion.shape}")
    
    # C√°lculo de m√©tricas de riesgo
    rendimientos = np.random.normal(0.05, 0.15, 252)  # Un a√±o de rendimientos
    var_95 = np.percentile(rendimientos, 5)  # Value at Risk al 95%
    sharpe_ratio = np.mean(rendimientos) / np.std(rendimientos)
    
    print(f"‚úì VaR 95%: {var_95:.2%}")
    print(f"‚úì Ratio de Sharpe: {sharpe_ratio:.2f}")

# Descomentar para ejecutar ejemplos avanzados
# ejemplo_uso_avanzado()